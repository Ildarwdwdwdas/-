#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª–µ–π Steam
"""

import asyncio
import json
import sys
import os
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from password_generator import PasswordGenerator
from steam_client import SteamAuthenticator, SteamWebClient, SteamPasswordChanger
from scheduler import SteamPasswordScheduler, PasswordHistory, PasswordChangeRecord


class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = {
            'password_generator': False,
            'steam_authenticator': False,
            'password_history': False,
            'config_handling': False,
            'steam_connection': False
        }
        
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞"""
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢: {title}")
        print(f"{'='*60}")
    
    def print_result(self, test_name: str, success: bool, details: str = ""):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìù {details}")
        self.results[test_name] = success
    
    def test_password_generator(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π"""
        self.print_header("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
        
        try:
            generator = PasswordGenerator()
            
            # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
            password = generator.generate_password()
            assert len(password) == 16, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: {len(password)}"
            print(f"   üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
            strength = generator.validate_password_strength(password)
            assert strength['score'] >= 5, f"–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å: {strength['score']}"
            print(f"   üí™ –°–∏–ª–∞ –ø–∞—Ä–æ–ª—è: {strength['strength']} (–±–∞–ª–ª—ã: {strength['score']})")
            
            # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            short_password = generator.generate_password(length=8, use_special_chars=False)
            assert len(short_password) == 8, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è"
            print(f"   üîó –ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å: {short_password}")
            
            # –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π
            passwords = generator.generate_multiple_passwords(3, length=12)
            assert len(passwords) == 3, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π"
            assert len(set(passwords)) == 3, "–ü–∞—Ä–æ–ª–∏ –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã"
            print(f"   üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π: {passwords}")
            
            self.print_result('password_generator', True, f"–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            
        except Exception as e:
            self.print_result('password_generator', False, f"–û—à–∏–±–∫–∞: {e}")
    
    def test_steam_authenticator(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Steam authenticator"""
        self.print_header("Steam Guard Authenticator")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π shared_secret (–Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π)
            test_secret = "dGVzdF9zaGFyZWRfc2VjcmV0X2Zvcl90ZXN0aW5nXzEyMzQ1"
            
            authenticator = SteamAuthenticator(test_secret)
            
            # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
            code = authenticator.generate_auth_code()
            assert len(code) == 5, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–¥–∞: {len(code)}"
            assert code.isdigit(), "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
            print(f"   üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥: {code}")
            
            # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            import time
            timestamp = int(time.time())
            code2 = authenticator.generate_auth_code(timestamp)
            assert len(code2) == 5, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ —Å timestamp"
            print(f"   ‚è∞ –ö–æ–¥ –¥–ª—è timestamp {timestamp}: {code2}")
            
            # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            conf_key = authenticator.generate_confirmation_key(timestamp, "conf")
            assert len(conf_key) > 0, "–ü—É—Å—Ç–æ–π –∫–ª—é—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            print(f"   üîê –ö–ª—é—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {conf_key[:20]}...")
            
            self.print_result('steam_authenticator', True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            
        except Exception as e:
            self.print_result('steam_authenticator', False, f"–û—à–∏–±–∫–∞: {e}")
    
    def test_password_history(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–∞—Ä–æ–ª–µ–π"""
        self.print_header("–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä–æ–ª–µ–π")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            history_file = "test_password_history.json"
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(history_file):
                os.remove(history_file)
            
            history = PasswordHistory(history_file, max_records=3)
            
            # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            from datetime import datetime
            record1 = PasswordChangeRecord(
                timestamp=datetime.now().isoformat(),
                old_password_hash="old_hash_1",
                new_password_hash="new_hash_1",
                success=True
            )
            history.add_record(record1)
            assert len(history.records) == 1, "–ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            print(f"   üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å 1")
            
            # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
            record2 = PasswordChangeRecord(
                timestamp=datetime.now().isoformat(),
                old_password_hash="old_hash_2",
                new_password_hash="new_hash_2",
                success=False,
                error_message="–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞"
            )
            history.add_record(record2)
            
            record3 = PasswordChangeRecord(
                timestamp=datetime.now().isoformat(),
                old_password_hash="old_hash_3",
                new_password_hash="new_hash_3",
                success=True
            )
            history.add_record(record3)
            
            assert len(history.records) == 3, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"
            print(f"   üìö –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(history.records)}")
            
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π —Å–º–µ–Ω—ã
            last_change = history.get_last_change()
            assert last_change is not None, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞"
            assert last_change.success, "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞"
            print(f"   üéØ –ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            failed_attempts = history.get_failed_attempts(since_hours=24)
            assert len(failed_attempts) == 1, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"
            print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {len(failed_attempts)}")
            
            # –¢–µ—Å—Ç 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
            history.save_history()
            assert os.path.exists(history_file), "–§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
            new_history = PasswordHistory(history_file)
            assert len(new_history.records) == 3, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"
            print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            os.remove(history_file)
            
            self.print_result('password_history', True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            
        except Exception as e:
            self.print_result('password_history', False, f"–û—à–∏–±–∫–∞: {e}")
    
    def test_config_handling(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.print_header("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            test_config = {
                "steam_account": {
                    "login": "test_user",
                    "password": "test_password",
                    "shared_secret": "dGVzdF9zaGFyZWRfc2VjcmV0",
                    "identity_secret": "dGVzdF9pZGVudGl0eV9zZWNyZXQ=",
                    "device_id": "test_device_id",
                    "steamid": 76561198000000000
                },
                "password_change": {
                    "change_interval_hours": 24,
                    "password_length": 16,
                    "use_special_chars": True,
                    "use_numbers": True,
                    "use_uppercase": True,
                    "use_lowercase": True,
                    "exclude_ambiguous": True
                },
                "logging": {
                    "level": "INFO",
                    "log_to_file": False
                }
            }
            
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            test_config_file = "test_config.json"
            with open(test_config_file, 'w', encoding='utf-8') as f:
                json.dump(test_config, f, ensure_ascii=False, indent=2)
            
            assert os.path.exists(test_config_file), "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
            print(f"   üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            scheduler = SteamPasswordScheduler(test_config_file)
            assert scheduler.config is not None, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            assert scheduler.config['steam_account']['login'] == 'test_user', "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            print(f"   ‚öôÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π
            generator = scheduler.password_generator
            test_password = generator.generate_password(
                length=test_config['password_change']['password_length']
            )
            assert len(test_password) == 16, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            print(f"   üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            os.remove(test_config_file)
            
            self.print_result('config_handling', True, "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            
        except Exception as e:
            self.print_result('config_handling', False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_steam_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Steam (–±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)"""
        self.print_header("Steam —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        
        try:
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            async with SteamWebClient() as client:
                assert client.session is not None, "–°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
                print(f"   üåê HTTP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
                
                # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Steam (–ø—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å)
                try:
                    async with client.session.get('https://steamcommunity.com/', timeout=10) as response:
                        assert response.status == 200, f"Steam –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}"
                        print(f"   ‚úÖ Steam –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status})")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é Steam: {e}")
                    # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
                
                # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSA –∫–ª—é—á–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞)
                # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                print(f"   üîë –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            
            self.print_result('steam_connection', True, "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
            
        except Exception as e:
            self.print_result('steam_connection', False, f"–û—à–∏–±–∫–∞: {e}")
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        self.print_header("–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
        
        total_tests = len(self.results)
        passed_tests = sum(self.results.values())
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests / total_tests) * 100:.1f}%")
        
        print(f"\n–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")
        for test_name, result in self.results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"  {status} {test_name}")
        
        if passed_tests == total_tests:
            print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print(f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        else:
            print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
            
        return passed_tests == total_tests
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–ù–´–• –¢–ï–°–¢–û–í")
        print("=" * 60)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_password_generator()
        self.test_steam_authenticator()
        self.test_password_history()
        self.test_config_handling()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await self.test_steam_connection()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        return self.print_summary()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("Steam Password Changer - –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.")
    print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ Steam Guard.")
    print("=" * 60)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if len(sys.argv) > 1 and sys.argv[1] == '--auto':
        proceed = True
    else:
        proceed = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): ").lower() == 'y'
    
    if not proceed:
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    tester = SystemTester()
    success = await tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(1)
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)